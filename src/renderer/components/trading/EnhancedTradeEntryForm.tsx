import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '../ui/card'
import { Button } from '../ui/button'
import { Input } from '../ui/input'
import { Label } from '../ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select'
import { Textarea } from '../ui/textarea'
import { Badge } from '../ui/badge'
import { Separator } from '../ui/separator'
import { CalendarIcon, TrendingUpIcon, TrendingDownIcon, AlertTriangleIcon, CheckCircleIcon } from 'lucide-react'
import { toast } from '../ui/use-toast'

// Types for integration with Position Calculator
interface CalculatedTrade {
  symbol: string
  entryPrice: number
  positionSize: number
  stopLossPrice: number
  profitTarget1: number
  profitTarget2: number
  riskPercentage: number
  vixLevel: number
  marketRegime: string
  calculatedAt: Date
  allocation: number
  riskRewardRatio: number
}

interface TradeEntryFormData {
  symbol: string
  action: 'BUY' | 'SELL'
  quantity: number
  entryPrice: number
  stopLossPrice?: number
  profitTarget1?: number
  profitTarget2?: number
  orderType: 'MARKET' | 'LIMIT' | 'STOP'
  timeInForce: 'DAY' | 'GTC' | 'IOC' | 'FOK'
  notes: string
  calculationSource?: 'MANUAL' | 'CALCULATOR'
  originalCalculation?: CalculatedTrade
}

interface TradeEntryFormProps {
  onSubmit: (trade: TradeEntryFormData) => void
  calculatedTrade?: CalculatedTrade | null
  onClearCalculation?: () => void
}

export const EnhancedTradeEntryForm: React.FC<TradeEntryFormProps> = ({
  onSubmit,
  calculatedTrade,
  onClearCalculation
}) => {
  const [formData, setFormData] = useState<TradeEntryFormData>({
    symbol: '',
    action: 'BUY',
    quantity: 0,
    entryPrice: 0,
    orderType: 'LIMIT',
    timeInForce: 'DAY',
    notes: '',
    calculationSource: 'MANUAL'
  })

  const [isModified, setIsModified] = useState(false)
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({})

  // Auto-populate form when calculated trade is provided
  useEffect(() => {
    if (calculatedTrade) {
      const autoGeneratedNotes = generateTradeNotes(calculatedTrade)
      
      setFormData({
        symbol: calculatedTrade.symbol,
        action: calculatedTrade.positionSize > 0 ? 'BUY' : 'SELL',
        quantity: Math.abs(calculatedTrade.positionSize),
        entryPrice: calculatedTrade.entryPrice,
        stopLossPrice: calculatedTrade.stopLossPrice,
        profitTarget1: calculatedTrade.profitTarget1,
        profitTarget2: calculatedTrade.profitTarget2,
        orderType: 'LIMIT',
        timeInForce: 'DAY',
        notes: autoGeneratedNotes,
        calculationSource: 'CALCULATOR',
        originalCalculation: calculatedTrade
      })
      
      setIsModified(false)
      toast({
        title: "Trade Pre-filled",
        description: `Position calculator values imported for ${calculatedTrade.symbol}`,
      })
    }
  }, [calculatedTrade])

  // Generate auto notes based on calculation
  const generateTradeNotes = (calc: CalculatedTrade): string => {
    const notes = []
    notes.push(`Calculated position: ${calc.positionSize} shares at $${calc.entryPrice.toFixed(2)}`)
    notes.push(`Risk: ${calc.riskPercentage}% of portfolio`)
    notes.push(`VIX Level: ${calc.vixLevel.toFixed(2)} (${calc.marketRegime})`)
    notes.push(`R/R Ratio: 1:${calc.riskRewardRatio.toFixed(2)}`)
    notes.push(`Stop Loss: $${calc.stopLossPrice.toFixed(2)}`)
    if (calc.profitTarget1) notes.push(`Target 1: $${calc.profitTarget1.toFixed(2)}`)
    if (calc.profitTarget2) notes.push(`Target 2: $${calc.profitTarget2.toFixed(2)}`)
    notes.push(`Calculated at: ${calc.calculatedAt.toLocaleString()}`)
    
    return notes.join('\n')
  }

  // Handle form field changes
  const handleFieldChange = (field: keyof TradeEntryFormData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
    if (calculatedTrade && !isModified) {
      setIsModified(true)
    }
    
    // Clear validation error for this field
    if (validationErrors[field]) {
      setValidationErrors(prev => ({ ...prev, [field]: '' }))
    }
  }

  // Validate form
  const validateForm = (): boolean => {
    const errors: Record<string, string> = {}
    
    if (!formData.symbol.trim()) {
      errors.symbol = 'Symbol is required'
    }
    
    if (formData.quantity <= 0) {
      errors.quantity = 'Quantity must be greater than 0'
    }
    
    if (formData.entryPrice <= 0) {
      errors.entryPrice = 'Entry price must be greater than 0'
    }
    
    if (formData.stopLossPrice && formData.stopLossPrice <= 0) {
      errors.stopLossPrice = 'Stop loss price must be greater than 0'
    }
    
    // Validate stop loss logic
    if (formData.stopLossPrice && formData.action === 'BUY' && formData.stopLossPrice >= formData.entryPrice) {
      errors.stopLossPrice = 'Stop loss must be below entry price for BUY orders'
    }
    
    if (formData.stopLossPrice && formData.action === 'SELL' && formData.stopLossPrice <= formData.entryPrice) {
      errors.stopLossPrice = 'Stop loss must be above entry price for SELL orders'
    }
    
    setValidationErrors(errors)
    return Object.keys(errors).length === 0
  }

  // Calculate risk/reward metrics
  const calculateMetrics = () => {
    if (!formData.entryPrice || !formData.stopLossPrice) return null
    
    const riskPerShare = Math.abs(formData.entryPrice - formData.stopLossPrice)
    const totalRisk = riskPerShare * formData.quantity
    
    let rewardPerShare1 = 0
    let rewardPerShare2 = 0
    
    if (formData.profitTarget1) {
      rewardPerShare1 = Math.abs(formData.profitTarget1 - formData.entryPrice)
    }
    
    if (formData.profitTarget2) {
      rewardPerShare2 = Math.abs(formData.profitTarget2 - formData.entryPrice)
    }
    
    return {
      riskPerShare,
      totalRisk,
      rewardPerShare1,
      rewardPerShare2,
      riskRewardRatio1: rewardPerShare1 > 0 ? rewardPerShare1 / riskPerShare : 0,
      riskRewardRatio2: rewardPerShare2 > 0 ? rewardPerShare2 / riskPerShare : 0
    }
  }

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm()) {
      toast({
        title: "Validation Error",
        description: "Please fix the errors in the form",
        variant: "destructive"
      })
      return
    }
    
    onSubmit(formData)
    
    // Reset form after submission
    setFormData({
      symbol: '',
      action: 'BUY',
      quantity: 0,
      entryPrice: 0,
      orderType: 'LIMIT',
      timeInForce: 'DAY',
      notes: '',
      calculationSource: 'MANUAL'
    })
    setIsModified(false)
  }

  const metrics = calculateMetrics()

  return (
    <Card className="w-full max-w-4xl mx-auto">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="flex items-center gap-2">
            <TrendingUpIcon className="h-5 w-5" />
            Trade Entry Form
          </CardTitle>
          
          {calculatedTrade && (
            <div className="flex items-center gap-2">
              <Badge variant={isModified ? "secondary" : "default"}>
                {isModified ? "Modified from Calculator" : "From Position Calculator"}
              </Badge>
              {onClearCalculation && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={onClearCalculation}
                >
                  Clear Import
                </Button>
              )}
            </div>
          )}
        </div>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Trade Information */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="symbol" className="flex items-center gap-1">
                Symbol
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="symbol"
                value={formData.symbol}
                onChange={(e) => handleFieldChange('symbol', e.target.value.toUpperCase())}
                placeholder="AAPL"
                className={validationErrors.symbol ? "border-red-500" : ""}
              />
              {validationErrors.symbol && (
                <p className="text-sm text-red-500">{validationErrors.symbol}</p>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="action">Action</Label>
              <Select
                value={formData.action}
                onValueChange={(value: 'BUY' | 'SELL') => handleFieldChange('action', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="BUY">BUY</SelectItem>
                  <SelectItem value="SELL">SELL</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="quantity" className="flex items-center gap-1">
                Quantity
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="quantity"
                type="number"
                value={formData.quantity}
                onChange={(e) => handleFieldChange('quantity', parseInt(e.target.value) || 0)}
                placeholder="100"
                className={validationErrors.quantity ? "border-red-500" : ""}
              />
              {validationErrors.quantity && (
                <p className="text-sm text-red-500">{validationErrors.quantity}</p>
              )}
            </div>
          </div>
          
          {/* Price Information */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="space-y-2">
              <Label htmlFor="entryPrice" className="flex items-center gap-1">
                Entry Price
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="entryPrice"
                type="number"
                step="0.01"
                value={formData.entryPrice}
                onChange={(e) => handleFieldChange('entryPrice', parseFloat(e.target.value) || 0)}
                placeholder="150.00"
                className={validationErrors.entryPrice ? "border-red-500" : ""}
              />
              {validationErrors.entryPrice && (
                <p className="text-sm text-red-500">{validationErrors.entryPrice}</p>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="stopLossPrice" className="flex items-center gap-1">
                Stop Loss
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="stopLossPrice"
                type="number"
                step="0.01"
                value={formData.stopLossPrice || ''}
                onChange={(e) => handleFieldChange('stopLossPrice', parseFloat(e.target.value) || undefined)}
                placeholder="145.00"
                className={validationErrors.stopLossPrice ? "border-red-500" : ""}
              />
              {validationErrors.stopLossPrice && (
                <p className="text-sm text-red-500">{validationErrors.stopLossPrice}</p>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="profitTarget1" className="flex items-center gap-1">
                Target 1
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="profitTarget1"
                type="number"
                step="0.01"
                value={formData.profitTarget1 || ''}
                onChange={(e) => handleFieldChange('profitTarget1', parseFloat(e.target.value) || undefined)}
                placeholder="160.00"
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="profitTarget2" className="flex items-center gap-1">
                Target 2
                {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
              </Label>
              <Input
                id="profitTarget2"
                type="number"
                step="0.01"
                value={formData.profitTarget2 || ''}
                onChange={(e) => handleFieldChange('profitTarget2', parseFloat(e.target.value) || undefined)}
                placeholder="170.00"
              />
            </div>
          </div>
          
          {/* Risk/Reward Metrics Display */}
          {metrics && (
            <Card className="bg-slate-50 dark:bg-slate-900">
              <CardContent className="p-4">
                <h4 className="font-semibold mb-3 flex items-center gap-2">
                  <TrendingUpIcon className="h-4 w-4" />
                  Risk/Reward Analysis
                </h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Risk per Share</p>
                    <p className="text-lg font-semibold text-red-600">
                      ${metrics.riskPerShare.toFixed(2)}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">Total Risk</p>
                    <p className="text-lg font-semibold text-red-600">
                      ${metrics.totalRisk.toFixed(2)}
                    </p>
                  </div>
                  <div className="text-center">
                    <p className="text-sm text-muted-foreground">R/R Ratio 1</p>
                    <p className="text-lg font-semibold text-green-600">
                      1:{metrics.riskRewardRatio1.toFixed(2)}
                    </p>
                  </div>
                  {metrics.riskRewardRatio2 > 0 && (
                    <div className="text-center">
                      <p className="text-sm text-muted-foreground">R/R Ratio 2</p>
                      <p className="text-lg font-semibold text-green-600">
                        1:{metrics.riskRewardRatio2.toFixed(2)}
                      </p>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          )}
          
          {/* Order Configuration */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="orderType">Order Type</Label>
              <Select
                value={formData.orderType}
                onValueChange={(value: 'MARKET' | 'LIMIT' | 'STOP') => handleFieldChange('orderType', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="MARKET">Market Order</SelectItem>
                  <SelectItem value="LIMIT">Limit Order</SelectItem>
                  <SelectItem value="STOP">Stop Order</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="timeInForce">Time in Force</Label>
              <Select
                value={formData.timeInForce}
                onValueChange={(value: 'DAY' | 'GTC' | 'IOC' | 'FOK') => handleFieldChange('timeInForce', value)}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="DAY">Day</SelectItem>
                  <SelectItem value="GTC">Good Till Canceled</SelectItem>
                  <SelectItem value="IOC">Immediate or Cancel</SelectItem>
                  <SelectItem value="FOK">Fill or Kill</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          
          {/* Notes */}
          <div className="space-y-2">
            <Label htmlFor="notes" className="flex items-center gap-1">
              Notes
              {calculatedTrade && <CheckCircleIcon className="h-3 w-3 text-green-500" />}
            </Label>
            <Textarea
              id="notes"
              value={formData.notes}
              onChange={(e) => handleFieldChange('notes', e.target.value)}
              placeholder="Additional notes about this trade..."
              rows={calculatedTrade ? 8 : 4}
            />
          </div>
          
          {/* Market Context from Calculator */}
          {calculatedTrade && (
            <Card className="bg-blue-50 dark:bg-blue-950">
              <CardContent className="p-4">
                <h4 className="font-semibold mb-2 flex items-center gap-2">
                  <AlertTriangleIcon className="h-4 w-4" />
                  Market Context (from Position Calculator)
                </h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div>
                    <p className="text-muted-foreground">VIX Level</p>
                    <p className="font-semibold">{calculatedTrade.vixLevel.toFixed(2)}</p>
                  </div>
                  <div>
                    <p className="text-muted-foreground">Market Regime</p>
                    <p className="font-semibold">{calculatedTrade.marketRegime}</p>
                  </div>
                  <div>
                    <p className="text-muted-foreground">Portfolio Risk</p>
                    <p className="font-semibold">{calculatedTrade.riskPercentage}%</p>
                  </div>
                  <div>
                    <p className="text-muted-foreground">Calculated</p>
                    <p className="font-semibold">
                      {calculatedTrade.calculatedAt.toLocaleTimeString()}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
          
          {/* Submit Button */}
          <div className="flex gap-4 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setFormData({
                  symbol: '',
                  action: 'BUY',
                  quantity: 0,
                  entryPrice: 0,
                  orderType: 'LIMIT',
                  timeInForce: 'DAY',
                  notes: '',
                  calculationSource: 'MANUAL'
                })
                setIsModified(false)
                setValidationErrors({})
              }}
            >
              Clear Form
            </Button>
            <Button type="submit" className="min-w-32">
              {formData.action} {formData.symbol || 'Stock'}
            </Button>
          </div>
        </form>
      </CardContent>
    </Card>
  )
}